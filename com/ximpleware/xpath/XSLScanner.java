/* The following code was generated by JFlex 1.4.3 on 2/5/11 6:29 PM */

/* 
 * Copyright (C) 2002-2011 XimpleWare, info@ximpleware.com
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


package com.ximpleware.xpath;
import java_cup.runtime.Symbol;
import com.ximpleware.parser.*;
import com.ximpleware.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/5/11 6:29 PM from the specification file
 * <tt>C:/Users/Jimmy Zhang/workspace/ximple-dev/com/ximpleware/xpath/XSLScanner.flex</tt>
 */
class XSLScanner extends sym2 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\2\0\1\1\22\0\1\1\1\20\1\57\1\0"+
    "\1\21\1\0\1\0\1\60\1\11\1\12\1\22\1\6\1\10\1\4"+
    "\1\5\1\23\12\2\1\3\1\0\1\16\1\17\1\15\1\0\1\7"+
    "\15\0\1\53\2\0\1\52\11\0\1\13\1\0\1\14\1\0\1\0"+
    "\1\0\1\31\1\47\1\41\1\24\1\43\1\50\1\44\1\46\1\25"+
    "\1\0\1\55\1\35\1\27\1\32\1\30\1\40\1\0\1\33\1\36"+
    "\1\37\1\42\1\26\1\45\1\54\1\56\1\51\1\0\1\34\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\4\1\21\1\22\1\23\7\1\1\24\14\1"+
    "\2\4\1\0\2\3\1\25\1\26\1\27\1\30\1\31"+
    "\5\1\1\32\40\1\1\0\1\33\1\0\1\1\1\34"+
    "\1\35\3\1\1\36\1\37\61\1\1\0\1\40\2\1"+
    "\1\0\1\41\12\1\1\0\1\42\34\1\1\0\1\43"+
    "\5\1\2\0\1\1\1\0\1\44\6\1\1\0\1\45"+
    "\1\0\1\46\3\1\2\0\1\1\1\0\1\47\2\0"+
    "\34\1\1\50\3\1\1\0\1\1\1\51\6\1\1\0"+
    "\1\52\1\1\1\53\11\1\1\0\1\54\2\1\2\0"+
    "\7\1\1\0\1\55\1\0\1\56\1\0\1\57\7\1"+
    "\1\0\1\60\5\1\1\0\1\1\1\61\3\1\2\0"+
    "\6\1\1\0\1\62\2\1\1\0\1\63\27\1\1\0"+
    "\1\64\3\1\3\0\1\65\1\1\1\0\1\66\1\0"+
    "\1\67\5\1\1\0\1\70\1\1\1\0\1\71\2\1"+
    "\2\0\14\1\1\0\1\72\3\1\1\73\1\0\1\74"+
    "\10\1\1\0\1\75\1\1\2\0\1\1\2\0\7\1"+
    "\1\0\1\1\1\76\1\0\1\77\1\1\2\0\3\1"+
    "\1\0\1\100\3\1\2\0\1\1\2\0\1\1\1\0"+
    "\1\101\1\1\1\0\1\102\1\1\1\0\1\103\3\1"+
    "\1\0\1\1\1\104\1\0\1\105\5\1\1\0\1\106"+
    "\2\1\1\0\1\107\3\1\1\0\1\110\1\1\1\0"+
    "\1\111\7\1\1\0\1\112\10\1\1\0\1\113\24\1"+
    "\1\0\1\1\1\114\1\1\1\0\1\115\1\1\1\0"+
    "\1\116\24\1\1\0\1\117\4\1\1\0\1\120\5\1"+
    "\1\0\1\121\4\1\1\0\1\122\2\1\2\0\5\1"+
    "\1\0\1\123\5\1\1\0\1\124\2\1\1\0\1\125"+
    "\3\1\2\0\1\1\4\0\2\1\1\0\1\126\2\1"+
    "\1\0\1\127\1\1\1\0\1\130\1\0\1\131\14\1"+
    "\1\0\1\132\1\1\1\0\1\133\2\1\2\0\2\1"+
    "\1\134\3\0\1\135\1\0\1\136\2\0\1\137\1\140";

  private static int [] zzUnpackAction() {
    int [] result = new int[653];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\304\0\365\0\304"+
    "\0\304\0\304\0\304\0\304\0\304\0\304\0\u0126\0\u0157"+
    "\0\304\0\u0188\0\304\0\304\0\u01b9\0\u01ea\0\u021b\0\u024c"+
    "\0\u027d\0\u02ae\0\u02df\0\u0310\0\304\0\u0341\0\u0372\0\u03a3"+
    "\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b"+
    "\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\61\0\304"+
    "\0\304\0\304\0\304\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746"+
    "\0\61\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d"+
    "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25"+
    "\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad"+
    "\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35"+
    "\0\u0d66\0\u058d\0\304\0\u05be\0\u0d97\0\304\0\61\0\u0dc8"+
    "\0\u0df9\0\u0e2a\0\61\0\61\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee"+
    "\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076"+
    "\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe"+
    "\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386"+
    "\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e"+
    "\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696"+
    "\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\304\0\u17ed"+
    "\0\u181e\0\u184f\0\304\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944"+
    "\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\304\0\u1a9b"+
    "\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23"+
    "\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab"+
    "\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33"+
    "\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\304\0\u2028\0\u2059\0\u208a"+
    "\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0\0\304\0\u21e1"+
    "\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307\0\304\0\u2338"+
    "\0\304\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f"+
    "\0\304\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5\0\u25e6"+
    "\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e"+
    "\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6"+
    "\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\304"+
    "\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42\0\304\0\u2b73\0\u2ba4"+
    "\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\304\0\u2cca\0\304"+
    "\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52"+
    "\0\u2e83\0\u2eb4\0\304\0\u2ee5\0\u2f16\0\u2f47\0\u2f78\0\u2fa9"+
    "\0\u2fda\0\u300b\0\u303c\0\u306d\0\u309e\0\u30cf\0\u3100\0\304"+
    "\0\u3131\0\304\0\u3162\0\304\0\u3193\0\u31c4\0\u31f5\0\u3226"+
    "\0\u3257\0\u3288\0\u32b9\0\u32ea\0\304\0\u331b\0\u334c\0\u337d"+
    "\0\u33ae\0\u33df\0\u3410\0\u3441\0\304\0\u3472\0\u34a3\0\u34d4"+
    "\0\u3505\0\u3536\0\u3567\0\u3598\0\u35c9\0\u35fa\0\u362b\0\u365c"+
    "\0\u368d\0\304\0\u36be\0\u36ef\0\u3720\0\304\0\u3751\0\u3782"+
    "\0\u37b3\0\u37e4\0\u3815\0\u3846\0\u3877\0\u38a8\0\u38d9\0\u390a"+
    "\0\u393b\0\u396c\0\u399d\0\u39ce\0\u39ff\0\u3a30\0\u3a61\0\u3a92"+
    "\0\u3ac3\0\u3af4\0\u3b25\0\u3b56\0\u3b87\0\u3bb8\0\304\0\u3be9"+
    "\0\u3c1a\0\u3c4b\0\u3c7c\0\u3cad\0\u3cde\0\304\0\u3d0f\0\u3d40"+
    "\0\304\0\u3d71\0\304\0\u3da2\0\u3dd3\0\u3e04\0\u3e35\0\u3e66"+
    "\0\u3e97\0\304\0\u3ec8\0\u3ef9\0\304\0\u3f2a\0\u3f5b\0\u3f8c"+
    "\0\u3fbd\0\u3fee\0\u401f\0\u4050\0\u4081\0\u40b2\0\u40e3\0\u4114"+
    "\0\u4145\0\u4176\0\u41a7\0\u41d8\0\u4209\0\u423a\0\304\0\u426b"+
    "\0\u429c\0\u42cd\0\304\0\u42fe\0\304\0\u432f\0\u4360\0\u4391"+
    "\0\u43c2\0\u43f3\0\u4424\0\u4455\0\u4486\0\u44b7\0\304\0\u44e8"+
    "\0\u4519\0\u454a\0\u457b\0\u45ac\0\u45dd\0\u460e\0\u463f\0\u4670"+
    "\0\u46a1\0\u46d2\0\u4703\0\u4734\0\u4765\0\u4796\0\304\0\u47c7"+
    "\0\304\0\u47f8\0\u4829\0\u485a\0\u488b\0\u48bc\0\u48ed\0\u491e"+
    "\0\304\0\u494f\0\u4980\0\u49b1\0\u49e2\0\u4a13\0\u4a44\0\u4a75"+
    "\0\u4aa6\0\u4ad7\0\u4b08\0\304\0\u4b39\0\u4b6a\0\304\0\u4b9b"+
    "\0\u4bcc\0\304\0\u4bfd\0\u4c2e\0\u4c5f\0\u4c90\0\u4cc1\0\304"+
    "\0\u4cf2\0\304\0\u4d23\0\u4d54\0\u4d85\0\u4db6\0\u4de7\0\u4e18"+
    "\0\304\0\u4e49\0\u4e7a\0\u4eab\0\304\0\u4edc\0\u4f0d\0\u4f3e"+
    "\0\u4f6f\0\304\0\u4fa0\0\u4fd1\0\304\0\u5002\0\u5033\0\u5064"+
    "\0\u5095\0\u50c6\0\u50f7\0\u5128\0\u5159\0\304\0\u518a\0\u51bb"+
    "\0\u51ec\0\u521d\0\u524e\0\u527f\0\u52b0\0\u52e1\0\u5312\0\304"+
    "\0\u5343\0\u5374\0\u53a5\0\u53d6\0\u5407\0\u5438\0\u5469\0\u549a"+
    "\0\u54cb\0\u54fc\0\u552d\0\u555e\0\u558f\0\u55c0\0\u55f1\0\u5622"+
    "\0\u5653\0\u5684\0\u56b5\0\u56e6\0\u5717\0\u5748\0\304\0\u5779"+
    "\0\u57aa\0\304\0\u57db\0\u580c\0\304\0\u583d\0\u586e\0\u589f"+
    "\0\u58d0\0\u5901\0\u5932\0\u5963\0\u5994\0\u59c5\0\u59f6\0\u5a27"+
    "\0\u5a58\0\u5a89\0\u5aba\0\u5aeb\0\u5b1c\0\u5b4d\0\u5b7e\0\u5baf"+
    "\0\u5be0\0\u5c11\0\304\0\u5c42\0\u5c73\0\u5ca4\0\u5cd5\0\u5d06"+
    "\0\304\0\u5d37\0\u5d68\0\u5d99\0\u5dca\0\u5dfb\0\u5e2c\0\304"+
    "\0\u5e5d\0\u5e8e\0\u5ebf\0\u5ef0\0\u5f21\0\304\0\u5f52\0\u5f83"+
    "\0\u5fb4\0\u5fe5\0\u6016\0\u6047\0\u6078\0\u60a9\0\u60da\0\u610b"+
    "\0\304\0\u613c\0\u616d\0\u619e\0\u61cf\0\u6200\0\u6231\0\304"+
    "\0\u6262\0\u6293\0\u62c4\0\304\0\u62f5\0\u6326\0\u6357\0\u6388"+
    "\0\u63b9\0\u63ea\0\u641b\0\u644c\0\u647d\0\u64ae\0\u64df\0\u6510"+
    "\0\u6541\0\304\0\u6572\0\u65a3\0\u65d4\0\304\0\u6605\0\u6636"+
    "\0\304\0\u6667\0\304\0\u6698\0\u66c9\0\u66fa\0\u672b\0\u675c"+
    "\0\u678d\0\u67be\0\u67ef\0\u6820\0\u6851\0\u6882\0\u68b3\0\u68e4"+
    "\0\304\0\u6915\0\u6946\0\304\0\u6977\0\u69a8\0\u69d9\0\u6a0a"+
    "\0\u6a3b\0\u6a6c\0\304\0\u6a9d\0\u6ace\0\u6aff\0\304\0\u6b30"+
    "\0\304\0\u6b61\0\u6b92\0\304\0\304";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[653];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\2\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\2\2\1\46\1\47"+
    "\1\2\1\50\2\2\1\51\1\2\1\52\1\53\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\22\2"+
    "\3\0\1\3\61\0\1\4\2\0\1\55\134\0\1\2"+
    "\1\0\1\56\1\54\1\2\1\57\16\0\10\2\1\0"+
    "\22\2\21\0\1\60\60\0\1\61\60\0\1\62\64\0"+
    "\1\63\35\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\1\2\1\64\2\2\1\65\3\2\1\0\6\2\1\66"+
    "\13\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\7\2\1\67\1\0\22\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\4\2\1\70\3\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\7\2"+
    "\1\71\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\6\2\1\72\1\2\1\0\2\2\1\73"+
    "\7\2\1\74\7\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\4\2\1\75\1\76\2\2\1\0\5\2"+
    "\1\77\14\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\4\2\1\100\3\2\1\0\6\2\1\101\13\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\4\2"+
    "\1\102\1\103\2\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\2\2\1\104"+
    "\2\2\1\105\1\106\13\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\7\2\1\107\1\0\6\2\1\110"+
    "\13\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\4\2\1\111\1\112\1\2\1\113\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\4\2\1\114"+
    "\3\2\1\0\5\2\1\115\1\116\2\2\1\117\10\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\3\2\1\120\16\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\6\2\1\121\1\2\1\0\1\2"+
    "\1\122\20\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\6\2\1\123\13\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\4\2\1\124\3\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\4\2\1\125\1\126\2\2\1\0\1\127\21\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\16\2\1\130\3\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\6\2\1\131\13\2"+
    "\2\0\57\132\1\133\1\132\60\134\1\133\1\135\1\0"+
    "\1\135\1\0\2\135\14\0\1\136\1\0\10\135\1\0"+
    "\22\135\4\0\1\55\56\0\1\2\1\0\1\56\1\54"+
    "\2\2\16\0\10\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\2\2\1\137\5\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\4\2\1\140\15\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\1\2\1\141"+
    "\20\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\1\2\1\142\6\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\1\143\7\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\1\144"+
    "\7\2\1\0\4\2\1\145\15\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\2\2\1\146"+
    "\17\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\1\2\1\147\20\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\1\150\6\2\1\151\1\0"+
    "\2\2\1\152\17\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\3\2\1\153\4\2\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\3\2\1\154"+
    "\4\2\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\5\2\1\155\14\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\10\2\1\0"+
    "\1\2\1\156\20\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\4\2\1\157\3\2\1\160"+
    "\11\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\6\2\1\161\1\2\1\0\1\2\1\162\20\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\5\2\1\163"+
    "\1\2\1\164\1\0\22\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\3\2\1\165\4\2\1\0\12\2"+
    "\1\166\7\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\1\167\21\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\5\2\1\170\2\2\1\0"+
    "\5\2\1\171\14\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\17\2\1\172\2\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\10\2\1\0"+
    "\1\2\1\173\20\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\7\2\1\174\1\0\22\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\4\2\1\175\3\2"+
    "\1\0\6\2\1\176\13\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\1\177\2\2\1\200\2\2\1\201"+
    "\1\2\1\0\5\2\1\202\14\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\7\2\1\203\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\1\2"+
    "\1\204\6\2\1\0\22\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\1\2\1\205\6\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\3\2\1\206\16\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\1\207\7\2\1\0\4\2\1\210"+
    "\15\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\4\2\1\211\15\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\6\2\1\212\1\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\4\2\1\213\3\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\1\214\21\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\1\215\21\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\4\2\1\216\3\2\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\5\2\1\217"+
    "\2\2\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\21\2\1\220\2\0\1\135"+
    "\1\0\1\135\1\0\2\135\16\0\10\135\1\0\22\135"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\5\2\1\221\14\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\4\2\1\222\15\2"+
    "\2\0\1\2\1\0\1\2\1\54\1\223\1\2\16\0"+
    "\10\2\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\6\2\1\224\13\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\7\2\1\225"+
    "\1\0\22\2\2\0\1\2\1\226\1\2\1\54\2\2"+
    "\3\0\1\227\12\0\10\2\1\0\22\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\6\2"+
    "\1\230\13\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\3\2\1\231\4\2\1\0\22\2\2\0\1\2"+
    "\1\232\1\2\1\54\2\2\3\0\1\233\12\0\10\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\6\2\1\234\13\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\12\2"+
    "\1\235\7\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\6\2\1\236\1\2\1\0\22\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\4\2\1\237\3\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\5\2\1\240\2\2\1\0\22\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\6\2"+
    "\1\241\13\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\7\2\1\242\12\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\2\2"+
    "\1\243\17\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\7\2\1\244\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\1\2\1\245\6\2\1\0"+
    "\22\2\2\0\1\2\1\246\1\2\1\54\2\2\3\0"+
    "\1\247\12\0\10\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\1\2\1\250"+
    "\20\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\13\2\1\251\6\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\6\2\1\252\1\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\6\2\1\253\13\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\2\2\1\254"+
    "\17\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\1\2\1\255\6\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\6\2\1\256"+
    "\13\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\4\2\1\257\15\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\4\2\1\260"+
    "\15\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\6\2\1\261\13\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\3\2\1\262\4\2\1\0"+
    "\3\2\1\263\16\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\2\2\1\264\1\2\1\265"+
    "\15\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\6\2\1\266\1\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\7\2\1\267\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\1\270\21\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\1\271\21\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\6\2"+
    "\1\272\13\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\1\2\1\273\20\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\4\2\1\274\3\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\5\2\1\275\2\2\1\0\22\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\6\2"+
    "\1\276\13\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\1\277\21\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\1\300\21\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\1\2\1\301\20\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\4\2\1\302\3\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\3\2"+
    "\1\303\4\2\1\0\22\2\2\0\1\2\1\304\1\2"+
    "\1\54\2\2\3\0\1\305\12\0\10\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\3\2"+
    "\1\306\4\2\1\0\22\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\6\2\1\307\13\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\2\2\1\310\17\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\1\2\1\311\20\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\1\2"+
    "\1\312\6\2\1\0\22\2\3\0\1\226\7\0\1\227"+
    "\47\0\1\2\1\313\1\2\1\54\2\2\3\0\1\314"+
    "\12\0\10\2\1\0\22\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\5\2\1\315\2\2\1\0\22\2"+
    "\3\0\1\232\7\0\1\233\47\0\1\2\1\316\1\2"+
    "\1\54\2\2\3\0\1\317\12\0\10\2\1\0\1\2"+
    "\1\320\20\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\6\2\1\321\13\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\1\322\7\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\1\323\21\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\1\324\21\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\7\2\1\325"+
    "\1\0\22\2\2\0\1\2\1\326\1\2\1\54\2\2"+
    "\3\0\1\327\12\0\10\2\1\0\22\2\2\0\1\2"+
    "\1\330\1\2\1\54\2\2\3\0\1\331\12\0\10\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\2\2\1\332\17\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\6\2\1\333\1\2"+
    "\1\0\22\2\3\0\1\246\7\0\1\247\47\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\2\2"+
    "\1\334\17\2\2\0\1\2\1\335\1\2\1\336\2\2"+
    "\16\0\10\2\1\0\22\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\1\2\1\337\20\2"+
    "\2\0\1\2\1\340\1\2\1\54\2\2\3\0\1\341"+
    "\12\0\10\2\1\0\22\2\2\0\1\2\1\342\1\2"+
    "\1\54\2\2\3\0\1\343\12\0\10\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\2\2\1\344\17\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\6\2\1\345\1\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\6\2\1\346\13\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\6\2\1\347\13\2"+
    "\2\0\1\2\1\0\1\2\1\54\1\350\1\2\16\0"+
    "\10\2\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\6\2\1\351\13\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\5\2\1\352"+
    "\2\2\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\5\2\1\353\2\2\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\5\2\1\354"+
    "\2\2\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\2\2\1\355\17\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\10\2\1\0"+
    "\6\2\1\356\13\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\1\2\1\357\6\2\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\1\360\7\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\7\2\1\361\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\1\362\1\2\16\0\10\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\1\363"+
    "\7\2\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\3\2\1\364\16\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\7\2\1\365"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\6\2\1\366\13\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\4\2\1\367\3\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\6\2\1\370\13\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\7\2\1\371\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\6\2\1\372\13\2\3\0\1\304\7\0"+
    "\1\305\47\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\6\2\1\373\13\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\6\2\1\374\1\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\4\2\1\375\3\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\2\2\1\376"+
    "\17\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\12\2\1\377\7\2\3\0\1\313\7\0"+
    "\1\314\50\0\1\314\10\0\1\u0100\46\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\1\u0101\21\2"+
    "\3\0\1\316\7\0\1\317\47\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\3\2\1\u0102\16\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\7\2"+
    "\1\u0103\1\0\22\2\2\0\1\2\1\u0104\1\2\1\54"+
    "\1\u0105\1\2\3\0\1\u0106\12\0\10\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\2\2"+
    "\1\u0107\5\2\1\0\22\2\2\0\1\2\1\0\1\2"+
    "\1\54\1\u0108\1\2\16\0\10\2\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\1\u0109\1\2\16\0\10\2"+
    "\1\0\22\2\3\0\1\326\7\0\1\327\50\0\1\330"+
    "\7\0\1\331\47\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\1\2\1\u010a\20\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\7\2"+
    "\1\u010b\12\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\7\2\1\u010c\1\0\22\2\3\0\1\335\1\0"+
    "\1\u010d\55\0\1\135\1\0\1\135\1\u010e\2\135\14\0"+
    "\1\136\1\0\10\135\1\0\22\135\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\1\u010f\21\2"+
    "\3\0\1\340\7\0\1\341\50\0\1\342\7\0\1\343"+
    "\50\0\1\343\10\0\1\u0110\46\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\1\2\1\u0111\6\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\2\2\1\u0112\17\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\1\2\1\u0113\20\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\1\u0114"+
    "\7\2\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\3\2\1\u0115\16\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\6\2\1\u0116"+
    "\1\2\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\7\2\1\u0117\1\0\22\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\1\2\1\u0118\6\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\2\2\1\u0119\17\2\2\0\1\2"+
    "\1\u011a\1\2\1\54\2\2\3\0\1\u011b\12\0\10\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\6\2\1\u011c\1\2\1\0\22\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\6\2\1\u011d\1\2"+
    "\1\0\22\2\2\0\1\2\1\u011e\1\2\1\u011f\2\2"+
    "\16\0\10\2\1\0\22\2\2\0\1\2\1\0\1\2"+
    "\1\54\1\u0120\1\2\16\0\10\2\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\10\2\1\0"+
    "\10\2\1\u0121\11\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\6\2\1\u0122\13\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\10\2\1\0"+
    "\6\2\1\u0123\13\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\5\2\1\u0124\2\2\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\5\2\1\u0125"+
    "\2\2\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\10\2\1\u0126\11\2\2\0"+
    "\1\2\1\u0127\1\2\1\54\2\2\3\0\1\u0128\12\0"+
    "\10\2\1\0\22\2\2\0\1\2\1\u0129\1\2\1\54"+
    "\2\2\3\0\1\u012a\12\0\10\2\1\0\22\2\2\0"+
    "\1\2\1\u012b\1\2\1\54\2\2\3\0\1\u012c\12\0"+
    "\10\2\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\6\2\1\u012d\1\2\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\1\u012e\7\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\1\u012f"+
    "\1\2\16\0\10\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\4\2\1\u0130\3\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\5\2\1\u0131\14\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\1\2\1\u0132\6\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\5\2\1\u0133\2\2\1\0\22\2\2\0\1\2\1\u0134"+
    "\1\2\1\54\2\2\3\0\1\u0135\12\0\10\2\1\0"+
    "\22\2\3\0\1\u0104\7\0\1\u0106\47\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\11\2\1\u0136"+
    "\10\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\6\2\1\u0137\13\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\6\2\1\u0138\1\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\4\2\1\u0139\15\2\2\0\1\2\1\0"+
    "\1\2\1\54\1\u013a\1\2\16\0\10\2\1\0\22\2"+
    "\2\0\1\2\1\u013b\1\2\1\54\1\u013c\1\2\3\0"+
    "\1\u013d\12\0\10\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\1\2\1\u013e\6\2\1\0"+
    "\22\2\5\0\1\u010e\55\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\5\2\1\u013f\2\2\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\4\2\1\u0140"+
    "\3\2\1\0\22\2\2\0\1\2\1\u0141\1\2\1\u0142"+
    "\2\2\16\0\10\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\1\2\1\u0143"+
    "\20\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\1\2\1\u0144\6\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\4\2\1\u0145\3\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\2\2\1\u0146\17\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\6\2\1\u0147"+
    "\13\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\6\2\1\u0148\1\2\1\0\22\2\2\0\1\2\1\u0149"+
    "\1\2\1\54\2\2\3\0\1\u014a\12\0\10\2\1\0"+
    "\22\2\3\0\1\u011a\7\0\1\u011b\47\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\2\2\1\u014b"+
    "\17\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\7\2\1\u014c\12\2\3\0\1\u011e\1\0"+
    "\1\u014d\55\0\1\135\1\0\1\135\1\u014e\2\135\14\0"+
    "\1\136\1\0\10\135\1\0\22\135\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\4\2\1\u014f"+
    "\15\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\1\2\1\u0150\6\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\1\u0151\1\2\16\0\10\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\1\u0152\1\2\16\0"+
    "\10\2\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\2\2\1\u0153\17\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\6\2\1\u0154"+
    "\1\2\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\1\2\1\u0155\6\2\1\0\22\2\3\0"+
    "\1\u0127\7\0\1\u0128\50\0\1\u0129\7\0\1\u012a\50\0"+
    "\1\u012b\7\0\1\u012c\47\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\2\2\1\u0156\17\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\5\2\1\u0157"+
    "\2\2\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\5\2\1\u0158\14\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\7\2\1\u0159"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\2\2\1\u015a\17\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\14\2"+
    "\1\u015b\5\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\4\2\1\u015c\15\2\3\0\1\u0134"+
    "\7\0\1\u0135\47\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\5\2\1\u015d\2\2\1\0\22\2\2\0\1\2"+
    "\1\0\1\2\1\54\1\u015e\1\2\16\0\10\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\5\2\1\u015f\2\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\5\2\1\u0160\2\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\10\2\1\u0161\11\2\3\0\1\u013b\7\0"+
    "\1\u013d\47\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\1\u0162\21\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\6\2\1\u0163\1\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\2\2\1\u0164\17\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\6\2\1\u0165\1\2\1\0\22\2"+
    "\3\0\1\u0141\1\0\1\u0166\55\0\1\135\1\0\1\135"+
    "\1\u0167\2\135\14\0\1\136\1\0\10\135\1\0\22\135"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\1\2"+
    "\1\u0168\6\2\1\0\22\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\6\2\1\u0169\1\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\1\2"+
    "\1\u016a\6\2\1\0\22\2\2\0\1\2\1\u016b\1\2"+
    "\1\54\2\2\3\0\1\u016c\12\0\10\2\1\0\22\2"+
    "\2\0\1\2\1\u016d\1\2\1\54\2\2\3\0\1\u016e"+
    "\12\0\10\2\1\0\22\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\1\2\1\u016f\20\2"+
    "\3\0\1\u0149\7\0\1\u014a\47\0\1\2\1\u0170\1\2"+
    "\1\54\2\2\3\0\1\u0171\12\0\10\2\1\0\22\2"+
    "\2\0\1\2\1\u0172\1\2\1\54\2\2\3\0\1\u0173"+
    "\12\0\10\2\1\0\22\2\5\0\1\u014e\55\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\5\2\1\u0174\2\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\2\2\1\u0175\17\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\13\2"+
    "\1\u0176\6\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\11\2\1\u0177\10\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\6\2"+
    "\1\u0178\13\2\2\0\1\2\1\u0179\1\2\1\54\2\2"+
    "\3\0\1\u017a\12\0\10\2\1\0\22\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\6\2\1\u017b\1\2"+
    "\1\0\22\2\2\0\1\2\1\u017c\1\2\1\54\2\2"+
    "\3\0\1\u017d\12\0\10\2\1\0\22\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\6\2\1\u017e\1\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\7\2\1\u017f\1\0\22\2\2\0\1\2\1\u0180"+
    "\1\2\1\u0181\1\u0182\1\2\16\0\10\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\6\2\1\u0183\13\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\6\2\1\u0184\13\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\6\2\1\u0185\13\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\1\u0186\21\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\10\2\1\0"+
    "\15\2\1\u0187\4\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\3\2\1\u0188\4\2\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\10\2\1\0"+
    "\1\2\1\u0189\20\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\1\2\1\u018a\6\2\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\10\2\1\0"+
    "\6\2\1\u018b\13\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\7\2\1\u018c\12\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\10\2\1\0"+
    "\6\2\1\u018d\13\2\2\0\1\2\1\u018e\1\2\1\54"+
    "\2\2\3\0\1\u018f\12\0\10\2\1\0\22\2\5\0"+
    "\1\u0167\55\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\6\2\1\u0190\1\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\7\2\1\u0191"+
    "\12\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\6\2\1\u0192\1\2\1\0\22\2\3\0\1\u016b\7\0"+
    "\1\u016c\50\0\1\u016c\10\0\1\u0193\47\0\1\u016d\7\0"+
    "\1\u016e\47\0\1\2\1\u0194\1\2\1\54\2\2\3\0"+
    "\1\u0195\12\0\10\2\1\0\22\2\3\0\1\u0170\7\0"+
    "\1\u0171\50\0\1\u0172\7\0\1\u0173\47\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\1\2\1\u0196"+
    "\20\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\11\2\1\u0197\10\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\4\2\1\u0198\3\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\2\2\1\u0199\17\2\2\0\1\2\1\0"+
    "\1\2\1\54\1\u019a\1\2\16\0\10\2\1\0\22\2"+
    "\3\0\1\u0179\7\0\1\u017a\47\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\7\2\1\u019b\12\2"+
    "\3\0\1\u017c\7\0\1\u017d\47\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\2\2\1\u019c\17\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\1\2"+
    "\1\u019d\6\2\1\0\22\2\3\0\1\u0180\1\0\1\u019e"+
    "\55\0\1\135\1\0\1\135\1\u019f\2\135\14\0\1\136"+
    "\1\0\10\135\1\0\22\135\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\4\2\1\u01a0\3\2\1\0\22\2"+
    "\2\0\1\2\1\u01a1\1\2\1\u01a2\2\2\16\0\10\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\1\u01a3"+
    "\1\2\16\0\10\2\1\0\22\2\2\0\1\2\1\u01a4"+
    "\1\2\1\u01a5\1\u01a6\1\2\16\0\10\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\13\2\1\u01a7\6\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\16\2\1\u01a8\3\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\6\2\1\u01a9\13\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\6\2\1\u01aa\13\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\2\2\1\u01ab\17\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\6\2\1\u01ac\1\2\1\0\22\2"+
    "\2\0\1\2\1\u01ad\1\2\1\54\1\u01ae\1\2\3\0"+
    "\1\u01af\12\0\10\2\1\0\22\2\2\0\1\2\1\u01b0"+
    "\1\2\1\54\2\2\3\0\1\u01b1\12\0\10\2\1\0"+
    "\22\2\3\0\1\u018e\7\0\1\u018f\47\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\7\2\1\u01b2"+
    "\12\2\2\0\1\2\1\u01b3\1\2\1\u01b4\1\u01b5\1\2"+
    "\16\0\10\2\1\0\22\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\2\2\1\u01b6\17\2"+
    "\3\0\1\u0194\7\0\1\u0195\47\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\6\2\1\u01b7\13\2"+
    "\2\0\1\2\1\u01b8\1\2\1\54\2\2\3\0\1\u01b9"+
    "\12\0\10\2\1\0\22\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\7\2\1\u01ba\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\3\2\1\u01bb"+
    "\4\2\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\1\2\1\u01bc\6\2\1\0\22\2\2\0"+
    "\1\2\1\u01bd\1\2\1\u01be\1\u01bf\1\2\16\0\10\2"+
    "\1\0\22\2\2\0\1\2\1\u01c0\1\2\1\u01c1\1\u01c2"+
    "\1\2\16\0\10\2\1\0\22\2\2\0\1\2\1\u01c3"+
    "\1\2\1\54\2\2\3\0\1\u01c4\12\0\10\2\1\0"+
    "\22\2\5\0\1\u019f\55\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\7\2\1\u01c5\1\0\22\2\3\0\1\u01a1"+
    "\1\0\1\u01c6\55\0\1\135\1\0\1\135\1\u01c7\2\135"+
    "\14\0\1\136\1\0\10\135\1\0\22\135\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\1\2"+
    "\1\u01c8\20\2\3\0\1\u01a4\1\0\1\u01c9\55\0\1\135"+
    "\1\0\1\135\1\u01ca\2\135\14\0\1\136\1\0\10\135"+
    "\1\0\22\135\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\5\2\1\u01cb\14\2\2\0\1\2"+
    "\1\0\1\2\1\54\1\u01cc\1\2\16\0\10\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\5\2\1\u01cd\2\2\1\0\22\2\2\0\1\2\1\u01ce"+
    "\1\2\1\54\1\u01cf\1\2\3\0\1\u01d0\12\0\10\2"+
    "\1\0\22\2\2\0\1\2\1\u01d1\1\2\1\54\2\2"+
    "\3\0\1\u01d2\12\0\10\2\1\0\22\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\11\2"+
    "\1\u01d3\10\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\7\2\1\u01d4\12\2\3\0\1\u01ad"+
    "\7\0\1\u01af\47\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\5\2\1\u01d5\2\2\1\0\12\2\1\u01d6\7\2"+
    "\3\0\1\u01b0\7\0\1\u01b1\47\0\1\2\1\0\1\2"+
    "\1\54\1\u01d7\1\2\16\0\10\2\1\0\22\2\3\0"+
    "\1\u01b3\1\0\1\u01d8\55\0\1\135\1\0\1\135\1\u01d9"+
    "\2\135\14\0\1\136\1\0\10\135\1\0\22\135\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\10\2\1\0"+
    "\1\2\1\u01da\20\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\1\2\1\u01db\20\2\2\0"+
    "\1\2\1\u01dc\1\2\1\54\2\2\3\0\1\u01dd\12\0"+
    "\10\2\1\0\22\2\3\0\1\u01b8\7\0\1\u01b9\47\0"+
    "\1\2\1\0\1\2\1\54\1\u01de\1\2\16\0\10\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\1\u01df\21\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\1\u01e0\7\2\1\0\22\2"+
    "\3\0\1\u01bd\1\0\1\u01e1\55\0\1\135\1\0\1\135"+
    "\1\u01e2\2\135\14\0\1\136\1\0\10\135\1\0\22\135"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\1\2\1\u01e3\20\2\3\0\1\u01c0\1\0\1\u01e4"+
    "\55\0\1\135\1\0\1\135\1\u01e5\2\135\14\0\1\136"+
    "\1\0\10\135\1\0\22\135\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\4\2\1\u01e6\3\2\1\0\22\2"+
    "\3\0\1\u01c3\7\0\1\u01c4\47\0\1\2\1\0\1\2"+
    "\1\54\1\u01e7\1\2\16\0\10\2\1\0\22\2\5\0"+
    "\1\u01c7\55\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\3\2\1\u01e8\16\2\5\0\1\u01ca\55\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\7\2\1\u01e9"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\2\2\1\u01ea\17\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\3\2\1\u01eb\4\2"+
    "\1\0\22\2\3\0\1\u01ce\7\0\1\u01d0\47\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\13\2"+
    "\1\u01ec\6\2\3\0\1\u01d1\7\0\1\u01d2\47\0\1\2"+
    "\1\u01ed\1\2\1\54\2\2\3\0\1\u01ee\12\0\10\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\2\2\1\u01ef\17\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\13\2"+
    "\1\u01f0\6\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\6\2\1\u01f1\13\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\1\2\1\u01f2\6\2"+
    "\1\0\22\2\5\0\1\u01d9\55\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\1\2\1\u01f3\6\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\1\u01f4\1\2\16\0"+
    "\10\2\1\0\22\2\3\0\1\u01dc\7\0\1\u01dd\47\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\10\2\1\0"+
    "\5\2\1\u01f5\14\2\2\0\1\2\1\0\1\2\1\54"+
    "\1\u01f6\1\2\16\0\10\2\1\0\22\2\2\0\1\2"+
    "\1\u01f7\1\2\1\54\2\2\3\0\1\u01f8\12\0\10\2"+
    "\1\0\22\2\5\0\1\u01e2\55\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\1\2\1\u01f9\6\2\1\0\22\2"+
    "\5\0\1\u01e5\55\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\7\2\1\u01fa\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\1\2\1\u01fb"+
    "\20\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\5\2\1\u01fc\2\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\1\2\1\u01fd\6\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\4\2\1\u01fe\3\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\6\2\1\u01ff"+
    "\13\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\7\2\1\u0200\1\0\22\2\3\0\1\u01ed\7\0\1\u01ee"+
    "\47\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\11\2\1\u0201\10\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\2\2\1\u0202\17\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\13\2\1\u0203\6\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\6\2\1\u0204\1\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\12\2\1\u0205\7\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\2\2\1\u0206\17\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\7\2"+
    "\1\u0207\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\5\2\1\u0208\14\2\3\0"+
    "\1\u01f7\7\0\1\u01f8\47\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\12\2\1\u0209\7\2\2\0"+
    "\1\2\1\0\1\2\1\54\1\u020a\1\2\16\0\10\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\6\2\1\u020b\13\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\4\2"+
    "\1\u020c\15\2\2\0\1\2\1\u020d\1\2\1\54\1\u020e"+
    "\1\2\3\0\1\u020f\12\0\10\2\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\1\u0210\1\2\16\0\10\2"+
    "\1\0\22\2\2\0\1\2\1\u0211\1\2\1\54\2\2"+
    "\3\0\1\u0212\12\0\10\2\1\0\22\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\4\2\1\u0213\3\2"+
    "\1\0\22\2\2\0\1\2\1\u0214\1\2\1\54\2\2"+
    "\3\0\1\u0215\12\0\10\2\1\0\22\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\6\2"+
    "\1\u0216\13\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\4\2\1\u0217\3\2\1\0\22\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\1\2"+
    "\1\u0218\20\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\1\u0219\21\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\4\2\1\u021a\3\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\1\2\1\u021b\6\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\7\2\1\u021c\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\1\u021d\21\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\1\2\1\u021e\20\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\10\2\1\0"+
    "\1\u021f\21\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\6\2\1\u0220\13\2\3\0\1\u020d"+
    "\7\0\1\u020f\47\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\13\2\1\u0221\6\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\4\2\1\u0222\3\2"+
    "\1\0\6\2\1\u0223\13\2\3\0\1\u0211\7\0\1\u0212"+
    "\47\0\1\2\1\0\1\2\1\54\2\2\16\0\3\2"+
    "\1\u0224\4\2\1\0\22\2\3\0\1\u0214\7\0\1\u0215"+
    "\47\0\1\2\1\0\1\2\1\54\2\2\16\0\7\2"+
    "\1\u0225\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\7\2\1\u0226\1\0\22\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\2\2"+
    "\1\u0227\17\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\1\2\1\u0228\6\2\1\0\22\2\2\0\1\2"+
    "\1\0\1\2\1\54\1\u0229\1\2\16\0\10\2\1\0"+
    "\22\2\2\0\1\2\1\u022a\1\2\1\54\2\2\3\0"+
    "\1\u022b\12\0\10\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\1\2\1\u022c\6\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\1\2\1\u022d\6\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\10\2\1\0\6\2\1\u022e"+
    "\13\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\13\2\1\u022f\6\2\2\0\1\2\1\u0230"+
    "\1\2\1\54\2\2\3\0\1\u0231\12\0\10\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\4\2\1\u0232\2\2\1\u0233\1\0\22\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\1\u0234\7\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\2\2\1\u0235\5\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\1\u0236\1\2\16\0\10\2\1\0\22\2"+
    "\2\0\1\2\1\u0237\1\2\1\54\2\2\3\0\1\u0238"+
    "\12\0\10\2\1\0\22\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\6\2\1\u0239\13\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\7\2"+
    "\1\u023a\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\6\2\1\u023b\1\2\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\10\2\1\0"+
    "\1\2\1\u023c\20\2\3\0\1\u022a\7\0\1\u022b\47\0"+
    "\1\2\1\u023d\1\2\1\54\2\2\3\0\1\u023e\12\0"+
    "\10\2\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\6\2\1\u023f\1\2\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\10\2\1\0"+
    "\1\u0240\21\2\2\0\1\2\1\u0241\1\2\1\u0242\2\2"+
    "\16\0\10\2\1\0\22\2\3\0\1\u0230\7\0\1\u0231"+
    "\47\0\1\2\1\0\1\2\1\54\2\2\16\0\7\2"+
    "\1\u0243\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\4\2\1\u0244\3\2\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\1\u0245\7\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\6\2\1\u0246\13\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\15\2"+
    "\1\u0247\4\2\3\0\1\u0237\7\0\1\u0238\47\0\1\2"+
    "\1\u0248\1\2\1\54\2\2\3\0\1\u0249\12\0\10\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\5\2\1\u024a\14\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\7\2"+
    "\1\u024b\12\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\2\2\1\u024c\17\2\3\0\1\u023d"+
    "\7\0\1\u023e\47\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\10\2\1\0\7\2\1\u024d\12\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\13\2"+
    "\1\u024e\6\2\3\0\1\u0241\1\0\1\u024f\55\0\1\135"+
    "\1\0\1\135\1\u0250\2\135\14\0\1\136\1\0\10\135"+
    "\1\0\22\135\2\0\1\2\1\0\1\2\1\54\1\u0251"+
    "\1\2\16\0\10\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\3\2\1\u0252\4\2\1\0"+
    "\22\2\2\0\1\2\1\u0253\1\2\1\54\2\2\3\0"+
    "\1\u0254\12\0\10\2\1\0\22\2\2\0\1\2\1\0"+
    "\1\2\1\54\2\2\16\0\6\2\1\u0255\1\2\1\0"+
    "\22\2\2\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\16\2\1\u0256\3\2\3\0\1\u0248\7\0"+
    "\1\u0249\47\0\1\2\1\0\1\2\1\54\2\2\16\0"+
    "\10\2\1\0\4\2\1\u0257\15\2\2\0\1\2\1\u0258"+
    "\1\2\1\u0259\2\2\16\0\10\2\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\7\2\1\u025a"+
    "\1\0\22\2\2\0\1\2\1\u025b\1\2\1\u025c\2\2"+
    "\16\0\10\2\1\0\22\2\2\0\1\2\1\u025d\1\2"+
    "\1\u025e\2\2\16\0\10\2\1\0\22\2\5\0\1\u0250"+
    "\55\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\3\2\1\u025f\16\2\2\0\1\2\1\0\1\2"+
    "\1\54\1\u0260\1\2\16\0\10\2\1\0\22\2\3\0"+
    "\1\u0253\7\0\1\u0254\47\0\1\2\1\u0261\1\2\1\54"+
    "\2\2\3\0\1\u0262\12\0\10\2\1\0\22\2\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\5\2\1\u0263"+
    "\2\2\1\0\22\2\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\10\2\1\0\2\2\1\u0264\17\2\3\0"+
    "\1\u0258\1\0\1\u0265\55\0\1\135\1\0\1\135\1\u0266"+
    "\2\135\14\0\1\136\1\0\10\135\1\0\22\135\2\0"+
    "\1\2\1\0\1\2\1\54\2\2\16\0\1\2\1\u0267"+
    "\6\2\1\0\22\2\3\0\1\u025b\1\0\1\u0268\55\0"+
    "\1\135\1\0\1\135\1\u0269\2\135\14\0\1\136\1\0"+
    "\10\135\1\0\22\135\3\0\1\u025d\1\0\1\u026a\55\0"+
    "\1\135\1\0\1\135\1\u026b\2\135\14\0\1\136\1\0"+
    "\10\135\1\0\22\135\2\0\1\2\1\0\1\2\1\54"+
    "\2\2\16\0\7\2\1\u026c\1\0\22\2\2\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\10\2\1\0\15\2"+
    "\1\u026d\4\2\3\0\1\u0261\7\0\1\u0262\47\0\1\2"+
    "\1\0\1\2\1\54\2\2\16\0\3\2\1\u026e\4\2"+
    "\1\0\22\2\2\0\1\2\1\0\1\2\1\54\2\2"+
    "\16\0\1\2\1\u026f\6\2\1\0\22\2\5\0\1\u0266"+
    "\55\0\1\2\1\0\1\2\1\54\2\2\16\0\6\2"+
    "\1\u0270\1\2\1\0\22\2\5\0\1\u0269\60\0\1\u026b"+
    "\55\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\6\2\1\u0271\13\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\16\2\1\u0272\3\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\6\2\1\u0273\13\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\4\2\1\u0274\3\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\7\2\1\u0275\12\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\13\2\1\u0276\6\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\5\2"+
    "\1\u0277\2\2\1\0\22\2\2\0\1\2\1\u0278\1\2"+
    "\1\54\2\2\3\0\1\u0279\12\0\10\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\6\2"+
    "\1\u027a\1\2\1\0\22\2\2\0\1\2\1\u027b\1\2"+
    "\1\54\2\2\3\0\1\u027c\12\0\10\2\1\0\22\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\1\2"+
    "\1\u027d\6\2\1\0\22\2\2\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\3\2\1\u027e\4\2\1\0\22\2"+
    "\3\0\1\u0278\7\0\1\u0279\47\0\1\2\1\u027f\1\2"+
    "\1\54\2\2\3\0\1\u0280\12\0\10\2\1\0\22\2"+
    "\3\0\1\u027b\7\0\1\u027c\47\0\1\2\1\0\1\2"+
    "\1\54\2\2\16\0\10\2\1\0\17\2\1\u0281\2\2"+
    "\2\0\1\2\1\0\1\2\1\54\2\2\16\0\10\2"+
    "\1\0\6\2\1\u0282\13\2\3\0\1\u027f\7\0\1\u0280"+
    "\50\0\1\u0280\10\0\1\u0283\44\0\1\u0284\1\u0285\1\2"+
    "\1\u0286\1\2\1\54\2\2\3\0\1\u0287\12\0\10\2"+
    "\1\0\22\2\2\0\1\2\1\u0288\1\2\1\54\2\2"+
    "\3\0\1\u0289\12\0\10\2\1\0\22\2\2\0\57\u0284"+
    "\1\u028a\1\u0284\60\u0285\1\u028b\1\0\1\u0286\7\0\1\u0287"+
    "\50\0\1\u0288\7\0\1\u0289\50\0\1\u028a\10\0\1\u028c"+
    "\47\0\1\u028b\10\0\1\u028d\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27587];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\2\11\1\1\7\11\2\1\1\11\1\1"+
    "\2\11\10\1\1\11\16\1\1\0\3\1\4\11\46\1"+
    "\1\0\1\11\1\0\1\1\1\11\67\1\1\0\1\11"+
    "\2\1\1\0\1\11\12\1\1\0\1\11\34\1\1\0"+
    "\1\11\5\1\2\0\1\1\1\0\1\11\6\1\1\0"+
    "\1\11\1\0\1\11\3\1\2\0\1\1\1\0\1\11"+
    "\2\0\34\1\1\11\3\1\1\0\1\1\1\11\6\1"+
    "\1\0\1\11\1\1\1\11\11\1\1\0\1\11\2\1"+
    "\2\0\7\1\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\7\1\1\0\1\11\5\1\1\0\1\1\1\11\3\1"+
    "\2\0\6\1\1\0\1\11\2\1\1\0\1\11\27\1"+
    "\1\0\1\11\3\1\3\0\1\11\1\1\1\0\1\11"+
    "\1\0\1\11\5\1\1\0\1\11\1\1\1\0\1\11"+
    "\2\1\2\0\14\1\1\0\1\11\3\1\1\11\1\0"+
    "\1\11\10\1\1\0\1\11\1\1\2\0\1\1\2\0"+
    "\7\1\1\0\1\1\1\11\1\0\1\11\1\1\2\0"+
    "\3\1\1\0\1\11\3\1\2\0\1\1\2\0\1\1"+
    "\1\0\1\11\1\1\1\0\1\11\1\1\1\0\1\11"+
    "\3\1\1\0\1\1\1\11\1\0\1\11\5\1\1\0"+
    "\1\11\2\1\1\0\1\11\3\1\1\0\1\11\1\1"+
    "\1\0\1\11\7\1\1\0\1\11\10\1\1\0\1\11"+
    "\24\1\1\0\1\1\1\11\1\1\1\0\1\11\1\1"+
    "\1\0\1\11\24\1\1\0\1\11\4\1\1\0\1\11"+
    "\5\1\1\0\1\11\4\1\1\0\1\11\2\1\2\0"+
    "\5\1\1\0\1\11\5\1\1\0\1\11\2\1\1\0"+
    "\1\11\3\1\2\0\1\1\4\0\2\1\1\0\1\11"+
    "\2\1\1\0\1\11\1\1\1\0\1\11\1\0\1\11"+
    "\14\1\1\0\1\11\1\1\1\0\1\11\2\1\2\0"+
    "\2\1\1\11\3\0\1\11\1\0\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[653];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private Symbol sym(int sym) {
    return new Symbol(sym);
  }

  private Symbol sym(int sym, Object val) {
    return new Symbol(sym, val);
  }
  boolean strict; //true for template patterns, false otherwise
  int isName; 
  NameType name;
  FuncName fname; 
  Ntest ntest;
  AxisType at;
  int len;
  String literal;
  Double number; 
  int colonPosition;
  int depth;
  public boolean isStrict(){
  	return strict;
  }
  
  public void setStrict(boolean b){
  	strict = b;  
  }
  
  public int getOffset(){
  	return yychar;
  }
  
  public String getArgument(char c, String input){
		int os1=input.indexOf(c), os2=input.lastIndexOf(c);
		
		return input.substring(os1+1, os2);
  }
  
  /* public void report_error(String message, Object info) {
	//throw new XPathParseException("Syntax error during parsing");
  }

  public void report_fatal_error(String message, Object info) throws XPathParseException{
	throw new XPathParseException("Syntax error during parsing: "+ message);
  }

  public void syntax_error(Symbol cur_token) {
	
  }
  
  public void unrecovered_syntax_error(Symbol cur_token) throws XPathParseException{
	throw new XPathParseException("XPath Syntax error: "+cur_token);
  }*/



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  XSLScanner(java.io.Reader in) {
  	isName = 1;
	colonPosition = -1;
	depth = 0; // detect the level of [ and ] because 
	strict = false;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  XSLScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 140) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, XPathParseException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.ABS;
				fname = new FuncName();
				fname.i = FuncName.ABS;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 97: break;
        case 6: 
          { if (!strict || (strict && (depth >0))){isName = 0 ; /*System.out.println(". returned ");*/ return sym(DOT);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 98: break;
        case 60: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.CONTAINS;
				fname = new FuncName();
				fname.i = FuncName.CONTAINS;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 99: break;
        case 79: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.ENCODE_FOR_URI;
				fname = new FuncName();
				fname.i = FuncName.ENCODE_FOR_URI;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 100: break;
        case 44: 
          { if (!strict || (strict && (depth >0))){ isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.COUNT;
				fname = new FuncName();
				fname.i = FuncName.COUNT;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 101: break;
        case 54: 
          { if (!strict || (strict && (depth >0))){  isName = 1; 
			 	yypushback(1);
				
				fname = new FuncName();
				fname.i = FuncName.CURRENT;
				return sym(FNAME2,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 102: break;
        case 81: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUBSTRING_AFTER;
				fname = new FuncName();
				fname.i = FuncName.SUBSTRING_AFTER;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 103: break;
        case 75: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				
				fname = new FuncName();
				fname.i = FuncName.GENERATE_ID;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 104: break;
        case 46: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				
				fname = new FuncName();
				fname.i = FuncName.FLOOR;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 105: break;
        case 87: 
          { if (!strict || (strict && (depth >0))){ isName = 1;
				at = new AxisType();
				at.i = AxisType.PRECEDING_SIBLING;
				return sym(AXISNAME,at);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 106: break;
        case 33: 
          { if (!strict || (strict && (depth >0))){  	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.NOT;
				fname = new FuncName();
				fname.i = FuncName.NOT;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 107: break;
        case 20: 
          { if (!strict || (strict && (depth >0))){ isName = 1 ; return sym(UNION) ; }else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 108: break;
        case 30: 
          { if (!strict || (strict && (depth >0))){ 
		if (isName == 0) {
		  isName = 1 ;
		 return sym(MOD);
	      } else {
		 isName = 0;
		 name = new NameType();
		 name.qname = "mod";
		 //System.out.println("returned a NAME "+yytext());
		 return sym(NAME,name);
	      }}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 109: break;
        case 31: 
          { if (!strict || (strict && (depth >0))){ 
		 if (isName == 0) {
		isName = 1 ;
		 return sym(AND);
	      } else {
		 isName = 0;
		 name = new NameType();
		 name.qname = "add";
		 return sym(NAME,name);
	      }}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 110: break;
        case 11: 
          { isName = 0 ; return sym(RP);
          }
        case 111: break;
        case 76: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.NAMESPACE_URI;
				fname = new FuncName();
				fname.i = FuncName.NAMESPACE_URI;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 112: break;
        case 15: 
          { if (!strict || (strict && (depth >0))){ isName = 1 ; return sym(LT); }else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 113: break;
        case 78: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.STRING_LENGTH;
				fname = new FuncName();
				fname.i = FuncName.STRING_LENGTH;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 114: break;
        case 18: 
          { if (isName ==0){
		isName = 1;
		//System.out.println("returned a MULT");
		return  sym(MULT);
	}
	 else {
		isName = 0;
		name = new NameType();
		name.qname = "*";
		return sym(NAME,name);
	 }
          }
        case 115: break;
        case 9: 
          { if (!strict || (strict && (depth >0))){ isName = 1 ; return sym(COMMA); }else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 116: break;
        case 70: 
          { if (!strict || (strict && (depth >0))){ isName = 1;
				at = new AxisType();
				at.i = AxisType.PRECEDING;
				return sym(AXISNAME,at);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 117: break;
        case 62: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUBSTRING;
				fname = new FuncName();
				fname.i = FuncName.SUBSTRING;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 118: break;
        case 52: 
          { if (!strict || (strict && (depth >0))){ isName = 1;
				at = new AxisType();
				at.i = AxisType.PARENT;
				return sym(AXISNAME,at);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 119: break;
        case 8: 
          { isName = 1 ; return sym(AT);
          }
        case 120: break;
        case 83: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUBSTRING_BEFORE;
				fname = new FuncName();
				fname.i = FuncName.SUBSTRING_BEFORE;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 121: break;
        case 92: 
          { isName = 0;
						ntest = new Ntest();
						ntest.i = Ntest.PROCESSING_INSTRUCTION;
						ntest.arg = null;
						//System.out.println(" !!!!!!!!!!!argument ");
						return sym(NTEST,ntest);
          }
        case 122: break;
        case 39: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				
				fname = new FuncName();
				fname.i = FuncName.TRUE;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 123: break;
        case 28: 
          { isName = 0;
				len = yytext().length();
				name = new NameType();
                               if (!XMLChar.isNCNameStartChar(yytext().charAt(0)))
					throw new XPathParseException("Invalid char in name token:  "+yytext()+ "@position 0");
				
				for(int i=1;i<len-2;i++){
					if (!XMLChar.isNCNameChar(yytext().charAt(i)))
						throw new XPathParseException("Invalid char in name token:  "+yytext()+ "@position "+i);
				}

				name.prefix = yytext().substring(0,len-2);
				name.localname = "*";
				//System.out.println("NAME "+name+ " returned");
				return sym(NAME,name);
          }
        case 124: break;
        case 42: 
          { if (!strict || (strict && (depth >0))){ isName = 1;
				at = new AxisType();
				at.i = AxisType.SELF;
				//System.out.println("SELF:: returned");
				return sym(AXISNAME,at);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 125: break;
        case 77: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.RESOLVE_QNAME;
				fname = new FuncName();
				fname.i = FuncName.RESOLVE_QNAME;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 126: break;
        case 48: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				
				fname = new FuncName();
				fname.i = FuncName.NUMBER;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 127: break;
        case 36: 
          { if (!strict || (strict && (depth >0))){ isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.NAME;
				fname = new FuncName();
				fname.i = FuncName.NAME;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 128: break;
        case 67: 
          { if (!strict || (strict && (depth >0))){ isName =1;
				at = new AxisType();
				at.i = AxisType.NAMESPACE;
				return sym(AXISNAME,at);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 129: break;
        case 40: 
          { isName = 0;
				ntest = new Ntest();
				ntest.i = Ntest.NODE;
				ntest.arg = null;
				return sym(NTEST,ntest);
          }
        case 130: break;
        case 88: 
          { if (!strict || (strict && (depth >0))){ isName = 1;
				at = new AxisType();
				at.i = AxisType.FOLLOWING_SIBLING;
				return sym(AXISNAME,at);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 131: break;
        case 73: 
          { if (!strict || (strict && (depth >0))){ isName = 1;
				at = new AxisType();
				at.i = AxisType.DESCENDANT;
				return sym(AXISNAME,at);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 132: break;
        case 47: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.QNAME;
				fname = new FuncName();
				fname.i = FuncName.QNAME;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 133: break;
        case 23: 
          { if (!strict || (strict && (depth >0))){ isName = 1 ; return sym(LE);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 134: break;
        case 59: 
          { isName = 0;
				ntest = new Ntest();
				ntest.i = Ntest.COMMENT;
				ntest.arg =  null;
				return sym(NTEST,ntest);
          }
        case 135: break;
        case 38: 
          { if (!strict || (strict && (depth >0))){  	isName = 1; 
			 	yypushback(1);
				fname = new FuncName();
				fname.i = FuncName.LAST;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 136: break;
        case 41: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				
				fname = new FuncName();
				fname.i = FuncName.ROUND;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 137: break;
        case 74: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.STARTS_WITH;
				fname = new FuncName();
				fname.i = FuncName.STARTS_WITH;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 138: break;
        case 1: 
          { isName = 0;
				name = new NameType();
				//name.qname = new String(yytext());
				//System.out.println("returned a NAME ==>" + yytext());
				//if (yytext().charAt(0) =='-'){
				//    throw new XPathParseException("Invalid char in name token:"+yytext());
				//}
				
				name.qname = new String(yytext());
				if (!XMLChar.isNCNameStartChar(name.qname.charAt(0)))
					throw new XPathParseException("Invalid char in name token:  "+yytext()+ "@position 0");
				
				for(int i=1;i<name.qname.length();i++){
					if (!XMLChar.isNCNameChar(name.qname.charAt(i)) 
						&& name.qname.charAt(i)!=':' )
						throw new XPathParseException("Invalid char in name token:  "+yytext()+ "@position "+i);
					if (name.qname.charAt(i)==':'){
						colonPosition = i;
					}
				}
		
				if (colonPosition != -1){
					name.prefix = yytext().substring(0,colonPosition);
					name.localname = yytext().substring(colonPosition+1);				
				}
				
				colonPosition = -1;
				return sym(NAME,name);
          }
        case 139: break;
        case 64: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.ENDS_WITH;
				fname = new FuncName();
				fname.i = FuncName.ENDS_WITH;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 140: break;
        case 68: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.LOCAL_NAME;
				fname = new FuncName();
				fname.i = FuncName.LOCAL_NAME;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 141: break;
        case 86: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.ROUND_HALF_TO_EVEN;
				fname = new FuncName();
				fname.i = FuncName.ROUND_HALF_TO_EVEN;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 142: break;
        case 4: 
          { throw new XPathParseException("Invalid char in XPath Expression");
          }
        case 143: break;
        case 84: 
          { if (!strict || (strict && (depth >0))){ isName = 1;
				at = new AxisType();
				at.i = AxisType.ANCESTOR_OR_SELF;
				return sym(AXISNAME,at);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 144: break;
        case 27: 
          { isName = 0;
				len = yytext().length();
				literal = yytext().substring(1, len-1);
				return sym(LITERAL,literal);
          }
        case 145: break;
        case 22: 
          { if (!strict || (strict && (depth >0))){ isName = 1 ; return sym(GE);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 146: break;
        case 19: 
          { isName = 1 ; 
	 //System.out.println("SLASH returned ");
	 return sym(SLASH);
          }
        case 147: break;
        case 57: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				
				fname = new FuncName();
				fname.i = FuncName.DOCUMENT;
				return sym(FNAME2,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 148: break;
        case 80: 
          { if (!strict || (strict && (depth >0))){ 	isName =1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.NORMALIZE_SPACE;
				fname = new FuncName();
				fname.i = FuncName.NORMALIZE_SPACE;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 149: break;
        case 25: 
          { isName = 1 ; 
	 //System.out.println("DSLASH returned "); 
	 return sym(DSLASH);
          }
        case 150: break;
        case 12: 
          { isName = 1 ; /*System.out.println( "[ returned");*/ depth++;return sym(LB);
          }
        case 151: break;
        case 53: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.COMPARE;
				fname = new FuncName();
				fname.i = FuncName.COMPARE;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 152: break;
        case 21: 
          { if (!strict || (strict && (depth >0))){isName = 0 ; return sym(DDOT);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 153: break;
        case 17: 
          { if (!strict || (strict && (depth >0))){ isName = 1; return sym(DOLLAR);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 154: break;
        case 89: 
          { if (!strict || (strict && (depth >0))){ isName = 1;
				at = new AxisType();
				at.i = AxisType.DESCENDANT_OR_SELF;
				return sym(AXISNAME,at);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 155: break;
        case 58: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.POSITION;
				fname = new FuncName();
				fname.i = FuncName.POSITION;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 156: break;
        case 10: 
          { isName = 1 ; return sym(LP);
          }
        case 157: break;
        case 56: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.BOOLEAN;
				fname = new FuncName();
				fname.i = FuncName.BOOLEAN;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 158: break;
        case 82: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.ESCAPE_HTML_URI;
				fname = new FuncName();
				fname.i = FuncName.ESCAPE_HTML_URI;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 159: break;
        case 29: 
          { if (!strict || (strict && (depth >0))){ 
			 if (isName == 0 ) {
		  isName = 1 ;
		 return sym(DIV);
	      } else {
		 isName = 0;
		 name = new NameType();
		 name.qname = "div";
		 return sym(NAME,name);
	      }}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 160: break;
        case 7: 
          { if (!strict || (strict && (depth >0))){ isName = 1 ; return sym(ADD);
		 }else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 161: break;
        case 85: 
          { if (!strict || (strict && (depth >0))){  	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.ROUND_HALF_TO_ODD;
				fname = new FuncName();
				fname.i = FuncName.ROUND_HALF_TO_ODD;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 162: break;
        case 37: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				
				fname = new FuncName();
				fname.i = FuncName.LANG;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 163: break;
        case 51: 
          { isName = 1;
				at = new AxisType();
				at.i = AxisType.CHILD;
				return sym(AXISNAME,at);
          }
        case 164: break;
        case 35: 
          { isName = 1; 
			 	yypushback(1);
				
				fname = new FuncName();
				fname.i = FuncName.KEY;
				return sym(FNAME2,fname);
          }
        case 165: break;
        case 90: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.LOCAL_NAME_FROM_QNAME;
				fname = new FuncName();
				fname.i = FuncName.LOCAL_NAME_FROM_QNAME;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 166: break;
        case 50: 
          { if (!strict || (strict && (depth >0))){ isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.CONCAT;
				fname = new FuncName();
				fname.i = FuncName.CONCAT;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 167: break;
        case 72: 
          { if (!strict || (strict && (depth >0))){ isName = 1;
				at = new AxisType();
				at.i = AxisType.FOLLOWING;
				return sym(AXISNAME,at);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 168: break;
        case 71: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.UPPER_CASE;
				fname = new FuncName();
				fname.i = FuncName.UPPER_CASE;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 169: break;
        case 14: 
          { if (!strict || (strict && (depth >0))){ isName = 1 ; return sym(GT);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 170: break;
        case 43: 
          { isName = 0;
				ntest = new Ntest();
				ntest.i = Ntest.TEXT;
				ntest.arg = null;
				return sym(NTEST,ntest);
          }
        case 171: break;
        case 63: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.TRANSLATE;
				fname = new FuncName();
				fname.i = FuncName.TRANSLATE;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 172: break;
        case 95: 
          { isName = 0;
						ntest = new Ntest();
						ntest.i = Ntest.PROCESSING_INSTRUCTION;
						ntest.arg = getArgument('"',yytext());
						//System.out.println(" !!!!!!!!!!!argument ==>" +ntest.arg);
						return sym(NTEST,ntest);
          }
        case 173: break;
        case 94: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.NAMESPACE_URI_FROM_QNAME;
				fname = new FuncName();
				fname.i = FuncName.NAMESPACE_URI_FROM_QNAME;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 174: break;
        case 45: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				
				fname = new FuncName();
				fname.i = FuncName.FALSE;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 175: break;
        case 2: 
          { /* eat white space */
          }
        case 176: break;
        case 5: 
          { if (!strict || (strict && (depth >0))){ isName = 1 ; return sym(SUB); }else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 177: break;
        case 65: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.IRI_TO_URI;
				fname = new FuncName();
				fname.i = FuncName.IRI_TO_URI;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 178: break;
        case 24: 
          { if (!strict || (strict && (depth >0))){ isName = 1 ; return sym(NE);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 179: break;
        case 16: 
          { if (!strict || (strict && (depth >0))){ isName = 1 ; return sym(EQ);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 180: break;
        case 34: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				
				fname = new FuncName();
				fname.i = FuncName.SUM;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 181: break;
        case 3: 
          { if (!strict || (strict && (depth >0))){ isName = 0;
				number = new Double(yytext());
				//System.out.println("number returned ==> "+ Double.parseDouble(yytext()));
				return sym(NUMBER,number);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 182: break;
        case 26: 
          { if (!strict || (strict && (depth >0))){ 
 		 if (isName == 0) {	
		 isName = 1 ;
		 return sym(OR);
	      } else {
		 isName = 0;
		 name = new NameType();
		 name.qname = "or";
		 return sym(NAME,name);
	      }}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 183: break;
        case 96: 
          { isName = 0;
						ntest = new Ntest();
						ntest.i = Ntest.PROCESSING_INSTRUCTION;
						ntest.arg = getArgument('\'', yytext());
						//System.out.println(" !!!!!!!!!!!argument ==>" +ntest.arg);
						return sym(NTEST,ntest);
          }
        case 184: break;
        case 55: 
          { if (!strict || (strict && (depth >0))){  	isName = 1; 
			 	yypushback(1);
				
				fname = new FuncName();
				fname.i = FuncName.CEILING;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 185: break;
        case 13: 
          { isName = 0 ; depth--; return sym(RB);
          }
        case 186: break;
        case 69: 
          { if (!strict || (strict && (depth >0))){  	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.LOWER_CASE;
				fname = new FuncName();
				fname.i = FuncName.LOWER_CASE;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 187: break;
        case 93: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.NAMESPACE_URI_FOR_PREFIX;
				fname = new FuncName();
				fname.i = FuncName.NAMESPACE_URI_FOR_PREFIX;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 188: break;
        case 61: 
          { if (!strict || (strict && (depth >0))){ isName = 1;
				at = new AxisType();
				at.i = AxisType.ANCESTOR;
				return sym(AXISNAME,at);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 189: break;
        case 66: 
          { if (!strict || (strict && (depth >0))){ isName = 1;
				at = new AxisType();
				at.i = AxisType.ATTRIBUTE;
				return sym(AXISNAME,at);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 190: break;
        case 91: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.CODE_POINTS_TO_STRING;
				fname = new FuncName();
				fname.i = FuncName.CODE_POINTS_TO_STRING;
				return sym(FNAME,fname);}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 191: break;
        case 49: 
          { if (!strict || (strict && (depth >0))){ 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.STRING;
				fname = new FuncName();
				fname.i = FuncName.STRING;
				return sym(FNAME,fname);	}else 
 		throw new XPathParseException(yytext()+" can't appear in a template pattern");
          }
        case 192: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
